D_tall$phase = as.factor(rep(1:3, each = 4, times = 80))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:4, times = 240))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C", "4"="D"))
rm(list=ls())
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:20),]
D_tall = reshape(D, varying = 4:51, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
names(D_tall)
fix(D_tall)
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
names(D_tall)
D_tall = D_tall[order(D_tall$ID),]
D_tall$condition_names = as.factor(rep(1:4, each = 12, times = 20))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
names(D_tall)
D_tall$phase = as.factor(rep(1:3, each = 4, times = 80))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:4, times = 240))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C", "4"="D"))
names(D_tall)
fix(D_tall)
D_tall$condition = NULL
D_tall$row.names = NULL
names(D_tall)
D_tall = D_tall[,c(1,2,4,5,6,3)]
names(D)
fix(D)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:20),]
D_tall = reshape(D, varying = 4:51, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
D_tall$condition_order = as.factor(D_tall$condition_order)
D_tall = D_tall[order(D_tall$ID),]
# ADD A CONDITION NAME COLUMN
D_tall$condition_names = as.factor(rep(1:4, each = 12, times = 20))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A CONDITION ORDER COLUMN
D_tall$condition_order = revalue(x = as.factor(D_tall$condition),
c("1" = "1234", "2"="2413", "3"="3142", "4"="4321"))
# ADD A 'PHASE' COLUMN
D_tall$phase = as.factor(rep(1:3, each = 4, times = 80))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:4, times = 240))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C", "4"="D"))
names(D_tall)
names(D)
names(D_tall)
fix(D_tall)
fix(D)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:20),]
D_tall = reshape(D, varying = 4:51, v.names = "measure", timevar = "condition_1",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
D_tall$condition_order = as.factor(D_tall$condition_order)
D_tall = D_tall[order(D_tall$ID),]
names(D_tall)
D_tall$condition_names = as.factor(rep(1:4, each = 12, times = 20))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A CONDITION ORDER COLUMN
D_tall$condition_order = revalue(x = as.factor(D_tall$condition),
c("1" = "1234", "2"="2413", "3"="3142", "4"="4321"))
fix(D_tall)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:20),]
D_tall = reshape(D, varying = 4:51, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
names(D_tall)
fix(D_tall)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:20),]
D_tall = reshape(D, varying = 4:51, v.names = "measure", timevar = "condition_1",
idvar = "ID",
direction = "long")
names(D_tall)
fix(D_tall)
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
D_tall$condition_names = as.factor(rep(1:4, each = 12, times = 20))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
fix(D_tall)
names(D_tall)
fix(D_tall)
fix(D_tall)
D_tall = D_tall[order(D_tall$ID),]
fix(D_tall)
D_tall$condition_order = revalue(x = as.factor(D_tall$condition),
c("1" = "A", "2"="B", "3"="C", "4"="D"))
fix(D_tall)
D_tall$condition_order = revalue(x = as.factor(D_tall$condition),
c("1" = "1234", "2"="2413", "3"="3142", "4"="4321"))
fix(D_tall)
D_tall$phase = as.factor(rep(1:3, each = 4, times = 80))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:4, times = 240))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C", "4"="D"))
fix(D_tall)
D_tall$condition = NULL
D_tall$condition_1 = NULL
D_tall$row.names = NULL
names(D_tall)
D_tall = D_tall[,c(1,2,5,4,6,7,3)]
fix(D_tall)
perm_func = function(s1,s2,p1,p2,o1,o2){ # s=condition name; p=phase; o=objects
set.seed(2018)                         # do NOT forget to put the arguments in quote.
b = rep(0,4000)
for(i in 1:4000){
x = sample(D_tall$measure)
dif = x[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1] -
x[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2]
b[i] = mean(dif)
}
# compute the actual difference beween BB pre and BB post
bb_diff = mean(D_tall$measure[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1]-
D_tall$measure[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2])
# 1- and 2-tailed p-values
c(bb_diff, sum(abs(b) > bb_diff)/4000, sum(abs(b) < bb_diff)/4000,
sum(b > bb_diff)/4000, sum(b < bb_diff)/4000)
}
# BOOTSTRAP FUNCTION
# Single-factor bootstrap function
global_boot = function(s,p,o){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s & d$phase==p & d$objects==o],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
# BOOTSTRAP FUNCTION
# Condition-difference bootstrap function
global_boot_2 = function(s1,s2,p1,p2,o1,o2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s1 & d$phase==p1 & d$objects==o1],
data=D_tall) - mean(d$measure[d$condition_names==s2 & d$phase==p2 & d$objects==o2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
names(D_tall)
prelim_analysis = lme(measure~(sex+condition_order)^2,
random=~1|ID,
data=D_tall)
anova.lme(prelim_analysis)
prelim_analysis = lme(measure~sex+condition_order+condition_order:sex,
random=~1|ID,
data=D_tall)
anova.lme(prelim_analysis)
mean(D_tall$measure[D_tall$phase=="Pre"])
lme_one__and_two_cause_subset = lme(measure~(condition_names+phase+objects)^3,
random=~1|ID,
data=one__and_two_cause_subset)
# omnibus ANOVA
anova.lme(lme_one__and_two_cause_subset)
one__and_two_cause_subset = subset(D_tall, ! condition_names %in% c("BB","IS")) # creating a smaller
# data set by removing the
# BB and IS conditions.
# 1C condition
lme_one__and_two_cause_subset = lme(measure~(condition_names+phase+objects)^3,
random=~1|ID,
data=one__and_two_cause_subset)
# omnibus ANOVA
anova.lme(lme_one__and_two_cause_subset)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:20),]
D_tall = reshape(D, varying = 4:51, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
D_tall = D_tall[order(D_tall$ID),]
D_tall$condition_names = as.factor(rep(1:4, each = 12, times = 20))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
D_tall$phase = as.factor(rep(1:3, each = 4, times = 80))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:4, times = 240))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C", "4"="D"))
names(D_tall)
D_tall$condition = NULL
D_tall$row.names = NULL
names(D_tall)
D_tall = D_tall[,c(1,2,4,5,6,3)]
perm_func = function(s1,s2,p1,p2,o1,o2){ # s=condition name; p=phase; o=objects
set.seed(2018)                         # do NOT forget to put the arguments in quote.
b = rep(0,4000)
for(i in 1:4000){
x = sample(D_tall$measure)
dif = x[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1] -
x[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2]
b[i] = mean(dif)
}
# compute the actual difference beween BB pre and BB post
bb_diff = mean(D_tall$measure[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1]-
D_tall$measure[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2])
# 1- and 2-tailed p-values
c(bb_diff, sum(abs(b) > bb_diff)/4000, sum(abs(b) < bb_diff)/4000,
sum(b > bb_diff)/4000, sum(b < bb_diff)/4000)
}
# BOOTSTRAP FUNCTION
# Single-factor bootstrap function
global_boot = function(s,p,o){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s & d$phase==p & d$objects==o],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
# BOOTSTRAP FUNCTION
# Condition-difference bootstrap function
global_boot_2 = function(s1,s2,p1,p2,o1,o2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s1 & d$phase==p1 & d$objects==o1],
data=D_tall) - mean(d$measure[d$condition_names==s2 & d$phase==p2 & d$objects==o2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
# NOTE THAT FORMAL ANALYSIS WERE NOT INCLUDED IN THE MANUSCRIPT FOR EXPERIMENT 3.
# HOWEVER, THE CODE WILL BE KEPT HERE IN CASE I'M REQUIRED TO REPORT THEM IN THE
# REVIEW OF THE MS.
#####################################################################################
# CONDITION (1C vs 2C) x OBJECT (A vs B) x PHASE (Pre vs Mid vs Post) OMNIBUS ANOVA #
#####################################################################################
# create a data frame in which the 1C condition is subsetted
one__and_two_cause_subset = subset(D_tall, ! condition_names %in% c("BB","IS")) # creating a smaller
lme_one__and_two_cause_subset = lme(measure~(condition_names+phase+objects)^3,
random=~1|ID,
data=one__and_two_cause_subset)
# omnibus ANOVA
anova.lme(lme_one__and_two_cause_subset)
prelim_analysis = lme(measure~(sex+condition_names+objects+phase)^4,
random=~1|ID,
data=D_tall)
anova.lme(prelim_analysis)
names(D_tall)
fix(D_tall)
################
# BB CONDITION #
################
# create a data frame in which the IS condition is subsetted
BB_subset = subset(D_tall, ! condition_names %in% c("IS","1C", "2C"))
BB_subset_lme = lme(measure~(phase+objects)^2,
random=~1|ID,
data=BB_subset)
# omnibus ANOVA
anova.lme(BB_subset_lme)
#######################
# PLANNED COMPARISONS #
#######################
#### A RATINGS AND MEASURES ####
# Apre:
# Mean: 47.95833; 95%CI[41.68105,54.23562]
global_boot("BB","Pre","A")
# Amid:
# Mean: 60.66667; 95%CI[51.60960,69.72373]
global_boot("BB","Mid","A")
global_boot("BB","Post","A")
# Apre vs Amid
perm_func("BB","BB","Pre","Mid","A","A")
global_boot_2("BB","BB","Pre","Mid","A","A")
# Apre vs Apost
perm_func("BB","BB","Pre","Post","A","A")
# Amid vs Apost
perm_func("BB","BB","Mid","Post","A","A")
# -28.7500   1.0000   0.0000   0.9995   0.0005
global_boot_2("BB","BB","Mid","Post","A","A")
# -49.5   1.0   0.0   1.0   0.0
global_boot_2("BB","BB","Pre","Post","A","A")
global_boot("BB","Pre","B")
global_boot("BB","Mid","B")
global_boot("BB","Post","B")
# Bpre vs Bmid
perm_func("BB","BB","Pre","Mid","B","B")
# -12.5000   1.0000   0.0000   0.9340   0.0635
global_boot_2("BB","BB","Pre","Mid","B","B")
# Bpre vs Bpost
perm_func("BB","BB","Pre","Post","B","B")
# 0.6500 0.9370 0.0600 0.4655 0.5330
global_boot_2("BB","BB","Pre","Post","B","B")
# Bmid vs Bpost
perm_func("BB","BB","Mid","Post","B","B")
global_boot_2("BB","BB","Mid","Post","B","B")
global_boot("BB","Pre","C")
global_boot("BB","Mid","C")
global_boot("BB","Post","C")
# Cpre vs Cmid
perm_func("BB","BB","Pre","Mid","C","C")
global_boot_2("BB","BB","Pre","Mid","C","C")
# Cpre vs Cpost
perm_func("BB","BB","Pre","Post","C","C")
# -1.1500  1.0000  0.0000  0.5595  0.4390
global_boot_2("BB","BB","Pre","Post","C","C")
# Cmid vs Cpost
perm_func("BB","BB","Mid","Post","C","C")
global_boot_2("BB","BB","Mid","Post","C","C")
#### D RATINGS AND MEASURES ####
# Dpre:
# Mean: 50.0000; 95%CI[44.6435,55.3565]
global_boot("BB","Pre","D")
global_boot("BB","Mid","D")
global_boot("BB","Post","D")
# Dpre vs Dmid
perm_func("BB","BB","Pre","Mid","D","D")
# 2.80000 0.72400 0.27325 0.37125 0.62775
global_boot_2("BB","BB","Pre","Mid","D","D")
perm_func("BB","BB","Pre","Post","D","D")
global_boot_2("BB","BB","Pre","Post","D","D")
perm_func("BB","BB","Mid","Post","D","D")
# 2.95000 0.74150 0.25675 0.37450 0.62450
global_boot_2("BB","BB","Mid","Post","D","D")
BB_subset_2 = subset(BB_subset, ! phase %in% c("Pre"))
BB_subset_3 = subset(BB_subset_2, ! objects %in% c("A","C"))
fix(BB_subset_3)
lm.null = lme(measure~1, random=~1|ID, data=BB_subset_3)
lm.alt = lme(measure~phase, random=~1|ID, data=BB_subset_3)
null.bic = BIC(lm.null)
alt.bic = BIC(lm.alt)
# compute the BF01  - this is the BF whose value is interpreted as the evidence in favor of the null (e.g., if the BF01 = 2.6, this means that there is 2.6 times as much evidence for the null than for the alternative or the evidence is 2.6:1 in favor of the null)
BF01 = exp((alt.bic - null.bic)/2) # this yields a BF that is interpreted as the evidence in favor of the null; it's critical that the alt.bic comes first otherwise your interpretation of the resulting BF value will be incorrect
BF10 = 1/BF01
BF10
condition_barplot = ggplot(D_tall, aes(objects, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(~condition_names, scales = 'free') + # scales='free' ensures that each blot has x labels
theme_bw()
condition_barplot = ggplot(D_tall, aes(objects, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(~condition_names, scales = 'free') + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
