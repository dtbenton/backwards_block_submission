########################################################
########################################################
#############                              #############
#############      EXPERIMENT 4 SCRIPT     #############
#############                              #############
########################################################
########################################################
########################################################
## INITIAL SET UP ##
# import "4_cause_CSV.csv"
D = read.csv(file.choose(), header = TRUE)
########################################################
########################################################
#############                              #############
#############      EXPERIMENT 4 SCRIPT     #############
#############                              #############
########################################################
########################################################
########################################################
## INITIAL SET UP ##
# import "4_cause_CSV.csv"
D = read.csv(file.choose(), header = TRUE)
dim(D)
########################################################
########################################################
#############                              #############
#############      EXPERIMENT 4 SCRIPT     #############
#############                              #############
########################################################
########################################################
########################################################
## INITIAL SET UP ##
# import "4_cause_CSV.csv"
D = read.csv(file.choose(), header = TRUE)
dim(D)
D_tall = reshape(D, varying = 2:49, v.names = "measure", timevar = "condition", idvar = "ID", new.row.names = 1:2880, direction = "long")
# order by ID
D_tall = D_tall[order(D_tall$ID),]
D_tall = D_tall[order(D_tall$ID),]
# remove scientific notation
options(scipen=999)
# libraries:
library(boot)
library(car)
library(lme4)
library(nlme)
library(pgirmess)
library(ez)
library(lazyeval)
library(ggplot2)
subApluspremid = subset(D_tall, ! condition %in% c(2:4,6:48))
subApluspremid$condition = factor(subApluspremid$condition)
subBplusmidpost = subset(D_tall, ! condition %in% c(1:6,8:10,12:48))
subBplusmidpost$condition = as.factor(subBplusmidpost$condition)
subBplusmidpost$condition = factor(subBplusmidpost$condition)
fix(subBplusmidpost)
names(subBplusmidpost)
lm.null = lme(measure~1, random=~1|ID, data = subBplusmidpost)
lm.alt = lme(measure~as.factor(condition), random=~1|ID, data = subBplusmidpost)
#obtain BICs for the null and alternative models
null.bic = BIC(lm.null)
alt.bic = BIC(lm.alt)
BF01 = exp((alt.bic - null.bic)/2) # this yields a BF that is interpreted as the evidence in favor of the null; it's critical that the alt.bic comes first otherwise your interpretation of the resulting BF value will be incorrect
BF10 = 1/BF01
BF10
mean(D_tall$measure[D_tall$condition==7])
mean(D_tall$measure[D_tall$condition==11])
names(D_tall)
fix(D_tall)
fix(D)
mean(D$B.plus.pre.BB)
mean(D$B.plus.post.BB)
fix(D)
names(D)
mean(D$B.plus.mid.BB.1)
mean(D$B.plus.mid.BB)
mean(D_tall$measure[D_tall$condition==7])
mean(D_tall$measure[D_tall$condition==11])
rm(list=ls())
library(hier.part)
# install linear-independence package
require(hier.part)
angle = combos(17)$binary
# install linear-independence package
install.packages("hier.part")
require(hier.part)
# define angle and orientation data frames
angle = combos(17)$binary
dim(angle)
fix(angle)
orientation = combos(4)$binary
fix(orientation)
angle = as.data.frame(angle[1:17,])
orientation = combos(4)$binary
orientation = as.data.frame(orientation[12:15,])
names(orientation) = NULL
names(angle) = NULL
fix(angle)
sink("example_dandy.txt")
for(i in 1:nrow(angle)){
for(j in 1:nrow(orientation)){
## code for inputs ##
cat("\n")
cat(paste("I:", "\n", sep="\t"))
cat(paste("(angle)", sep="\t"))
print(angle[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation)", sep="\t"))
print(orientation[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(angle_OUT)", sep="\t"))
print(angle[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation_OUT)", sep="\t"))
print(orientation[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
}
}
sink()
names(orientation) = NULL
names(angle) = NULL
fix(orientation)
sink("example_dandy.txt")
for(i in 1:nrow(angle)){
for(j in 1:nrow(orientation)){
## code for inputs ##
cat("\n")
cat(paste("I:", "\n", sep="\t"))
cat(paste("(angle)", sep="\t"))
print(angle[i-1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation)", sep="\t"))
print(orientation[j-1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(angle_OUT)", sep="\t"))
print(angle[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation_OUT)", sep="\t"))
print(orientation[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
}
}
sink()
Z = read.csv(file.choose(), header = FALSE)
require(hier.part)
angle = combos(17)$binary
angle = as.data.frame(angle[1:17,])
orientation = combos(4)$binary
orientation = as.data.frame(orientation[12:15,])
names(angle)
names(orientation) = NULL
names(angle) = NULL
names(angle)
fix(angle)
names(orientation)
sink("example_dandy.txt")
for(i in 1:nrow(angle)){
## code for inputs ##
cat("\n")
cat(paste("I:", "\n", sep="\t"))
cat(paste("(angle)", sep="\t"))
print(angle[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(angle_OUT)", sep="\t"))
print(angle[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste(";", sep="\t"))
cat("\n")
}
sink()
sink("example_dandy.txt")
for(i in 1:nrow(angle)){
## code for inputs ##
cat("\n")
cat(paste("I:", "\n", sep="\t"))
cat(paste("(angle)", sep="\t"))
print(angle[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(angle_OUT)", sep="\t"))
print(angle[i+1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste(";", sep="\t"))
cat("\n")
}
sink()
# define angle and orientation data frames
objects = combos(17)$binary
objects = as.data.frame(objects[1:100,])
angle = combos(8)$binary
angle = as.data.frame(angle[1:20,])
orientation = combos(4)$binary
orientation = as.data.frame(orientation[12:15,])
names(objects) = NULL
names(orientation) = NULL
names(angle) = NULL
sink("example_dandy.txt")
for(i in 1:nrow(objects)){
for(j in 1:nrow(angle)){
for(k in 1:nrow(orientation)){
## code for inputs ##
cat("\n")
cat(paste("name:", "\n", sep="\t"))
cat(paste("(object)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("I:", "\n", sep="\t"))
cat(paste("(angle)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("name:", "\n", sep="\t"))
cat(paste("(object_OUT)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("T:", "\n", sep="\t"))
cat(paste("(angle_OUT)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation_OUT)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
}
}
}
sink()
sink("example_dandy.txt")
for(i in 1:nrow(objects)){
for(j in 1:nrow(angle)){
for(k in 1:nrow(orientation)){
## code for inputs ##
cat(paste("I:", "\n", sep="\t"))
cat(paste("(object)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(angle)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(object_OUT)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(angle_OUT)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation_OUT)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
}
}
}
sink()
sink("example_dandy.txt")
for(i in 1:nrow(objects)){
for(j in 1:nrow(angle)){
for(k in 1:nrow(orientation)){
## code for inputs ##
cat(paste("I:", "\n", sep="\t"))
cat(paste("(object)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(angle)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(object_OUT)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(angle_OUT)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation_OUT)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
}
}
cat(paste(";", sep="\t"))
cat("\n")
}
sink()
rm(list=ls())
require(hier.part)
# define angle and orientation data frames
objects = combos(17)$binary
objects = as.data.frame(objects[1:100,])
angle = combos(8)$binary
angle = as.data.frame(angle[1:20,])
orientation = combos(4)$binary
orientation = as.data.frame(orientation[12:15,])
names(objects) = NULL
names(orientation) = NULL
names(angle) = NULL
sink("example_dandy.txt")
for(i in 1:nrow(objects)){
for(j in 1:nrow(angle)){
for(k in 1:nrow(orientation)){
## code for inputs ##
cat(paste("I:", "\n", sep="\t"))
cat(paste("(object)", sep="\t"))
print(objects[i-1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(angle)", sep="\t"))
print(angle[j-1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation)", sep="\t"))
print(orientation[k-1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
## code for targets ##
cat(paste("T:", "\n", sep="\t"))
cat(paste("(object_OUT)", sep="\t"))
print(objects[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(angle_OUT)", sep="\t"))
print(angle[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat("\n")
cat(paste("(orientation_OUT)", sep="\t"))
print(orientation[k,], sep = "\t", quote = FALSE, row.names = FALSE)
}
}
cat(paste(";", sep="\t"))
cat("\n")
}
sink()
# define angle and orientation data frames
objects = combos(30)$binary
2^25
objects = combos(25)$binary
2^9
