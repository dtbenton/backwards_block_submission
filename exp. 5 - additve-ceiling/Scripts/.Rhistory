rm(list=ls())
########################################################
########################################################
#############                              #############
#############      EXPERIMENT 4 SCRIPT     #############
#############                              #############
########################################################
########################################################
########################################################
## INITIAL SET UP ##
# import "4_cause_CSV.csv"
D = read.csv(file.choose(), header = TRUE)
dim(D)
names(D)
rm(list=ls())
########################################################
########################################################
#############                              #############
#############      EXPERIMENT 4 SCRIPT     #############
#############                              #############
########################################################
########################################################
########################################################
## INITIAL SET UP ##
# import "4_cause_CSV.csv"
D = read.csv(file.choose(), header = TRUE)
dim(D)
names(D)
# convert data from "wide" to "tall" format
D_tall = reshape(D, varying = 2:49, v.names = "measure", timevar = "condition", idvar = "ID", new.row.names = 1:2880, direction = "long")
# order by ID
D_tall = D_tall[order(D_tall$ID),]
# remove scientific notation
options(scipen=999)
library(boot)
library(car)
library(lme4)
library(nlme)
library(pgirmess)
library(ez)
library(lazyeval)
library(ggplot2)
names(D)
mean(D$B.plus.pre.BB)
mean(D$B.plus.post.BB)
mean(D$B.minus.pre.BB)
mean(D$B.minus.post.BB)
mean(D$B.pre.BB)
mean(D$B.plus.pre.BB)
mean(D$B.mid.pre.BB)
mean(D$B.mid.BB)
names(D)
mean(B.plus.mid.BB)
mean(D$B.plus.mid.BB)
names(D[,-c(2:3,6:7,10:11,14:49)])
BB_tall = as.data.frame(D[,-c(2:3,6:7,10:11,14:49)])
names(BB)
names(BB_tall)
fix(BB_tall)
is.data.frame(BB_tall)
dim(BB_tall)
BB = as.data.frame(D[,-c(2:3,6:7,10:11,14:49)])
4*60
6*60
BB_tall = reshape(BB, varying = 2:7, v.names = "measure",
timevar = "condition", idvar = "ID",
new.row.names = 1:360, direction = "long")
fix(BB_tall)
BB_tall = BB_tall[order(BB_tall$ID),]
fix(BB_tall)
names(BB_tall)
BB_tall$condition = revalue(x = as.factor(BB_tall$condition),
c("1" = "B+ pre", "2"="B- pre", "3" = "B+ mid",
"4" = "B- mid", "5" = "B+ post", "6" = "B- post"))
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
options(scipen=9999)
BB_tall$condition = revalue(x = as.factor(BB_tall$condition),
c("1" = "B+ pre", "2"="B- pre", "3" = "B+ mid",
"4" = "B- mid", "5" = "B+ post", "6" = "B- post"))
fix(BB_tall)
360/3
rep(c(1:3), times = 20)
fix(BB_tall)
rep(c(1:3), each = 2, times = 20)
fix(BB_tall)
length(rep(c(1:3), each = 2, times = 120))
length(rep(c(1:3), each = 2, times = 60))
rep(c(1:3), each = 2, times = 60)
fix(BB_tall)
BB_tall$phase = rep(c(1:3), each = 2, times = 60)
BB_tall$phase = revalue(x = as.factor(BB_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
fix(BB_tall)
names(BB_tall)
# reorder columns of BB_tall dataframe
BB_tall = BB_tall[,c(1,4,2,3)]
fix(BB_tall)
BB_tall$row.names = NULL
fix(BB_tall)
fix(BB_tall)
BB_tall$condition = NULL
fix(BB_tall)
length(rep(c(1:2), times = 180))
BB_tall$condition = rep(c(1:2), times = 180)
BB_tall$condition = revalue(x = as.factor(BB_tall$condition),
c("1" = "B+", "2"="B-"))
fix(BB_tall)
rename(BB_tall)
names(B_tall)
names(BB_tall)
# reorder columns of BB_tall dataframe
BB_tall = BB_tall[,c(1,4,2,3)]
names(BB_tall)
fix(BB_tall)
BB_tall$row.names = NULL
condition_barplot = ggplot(BB_tall, aes(phase, measure, fill = condition)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
theme_bw()
condition_barplot = ggplot(BB_tall, aes(condition, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
theme_bw()
condition_barplot = ggplot(BB_tall, aes(condition, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
theme_bw() +
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 75)) +
theme_classic() +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(BB_tall, aes(condition, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
theme_bw() +
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 75)) +
theme_classic() +
scale_fill_manual(values = c("white", "gray81", "black")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
names(D_tall)
fix(D_tall)
subBplusmidpost = subset(D_tall, ! condition %in% c(1:6,8:10,12:48))
subBplusmidpost$condition = as.factor(subBplusmidpost$condition)
subBplusmidpost$condition = factor(subBplusmidpost$condition)
set.seed(2017)
b = rep(0,5000)
for(i in 1:5000){
y = sample(subBplusmidpost$measure, replace=TRUE)
lm_1 = lme(y ~ condition, random=~1|ID, data=subBplusmidpost)
b[i] = fixed.effects(lm_1)[2]
}
lm.fit = lme(measure~condition, random=~1|ID, data=subBplusmidpost)
beta_actual = fixed.effects(lm.fit)[2]
beta_actual
sum(abs(b) < beta_actual)/5000
(mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Pre"]))
(mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Pre"])-)
(mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Pre"])-)
(mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Pre"])-mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Mid"]))
(mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Pre"])-mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Post"]))
summary(lm.fit)
mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Pre"])
mean(BB_tall$measure[BB_tall$condition=="B+" & BB_tall$phase=="Mid"])
mean(D_tall$measure[D_tall$condition==7])
mean(D_tall$measure[D_tall$condition==11])
12*4
means_vec = rep(0,48)
for(i in 1:length(means_vec)){
calc = mean(D_tall$measure[D_tall$condition==i])
means_vec[i] = calc
}
means_vec
names(BB)
head(BB_tall, 10)
means_vec_2 = rep(0,6)
for(i in 2:7){
calc = mean(BB[,i])
means_vec_2[i]
}
means_vec_2
means_vec_2 = rep(0,6)
for(i in 2:7){
calc = mean(BB[,i])
means_vec_2[i] = calc
}
means_vec_2
means_vec
names(subBpluspremid )
names(subBpluspremid)
subBpluspremid = subset(D_tall, ! condition %in% c(1:2,4:6,8:48))
subBpluspremid$condition = as.factor(subBpluspremid$condition)
subBpluspremid$condition = factor(subBpluspremid$condition)
set.seed(2017)
b = rep(0,5000)
for(i in 1:5000){
y = sample(subBpluspremid$measure, replace=TRUE)
lm_1 = lme(y ~ condition, random=~1|ID, data=subBpluspremid)
b[i] = fixed.effects(lm_1)[2]
}
lm.fit = lme(measure~condition, random=~1|ID, data=subBpluspremid)
beta_actual = fixed.effects(lm.fit)[2]
beta_actual
sum(abs(b) < beta_actual)/5000
sum(b<beta_actual)/5000
lm.null = lme(measure~1, random=~1|ID, data=subBpluspremid)
summary(lm.null)
lm.alt = lme(measure~as.factor(condition), random=~1|ID,
data=subBpluspremid)
summary(lm.alt)
mean(BB$B.plus.pre.BB+BB$B.plus.mid.BB)
BB$B.plus.pre.BB+BB$B.plus.mid.BB
mean(c(BB$B.plus.pre.BB,BB$B.plus.pre.BB))
mean(BB$B.plus.pre.BB)
mean(BB$B.plus.mid.BB)
mean(mean(BB$B.plus.pre.BB)+mean(BB$B.plus.mid.BB))
63.25+56.81667
120.0667/2
null.bic = BIC(lm.null)
alt.bic = BIC(lm.alt)
BF01 = exp((alt.bic - null.bic)/2) # this yields a BF that is interpreted as the evidence in favor of the null; it's critical that the alt.bic comes first otherwise your interpretation of the resulting BF value will be incorrect
BF10 = 1/BF01
BF10
sum(b<beta_actual)/5000
sum(abs(b) < beta_actual)/5000
