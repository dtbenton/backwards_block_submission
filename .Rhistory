rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
options(scipen=9999)
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
options(scipen=9999)
dir
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
dir
D = D[c(1:24),]
D_tall = reshape(D, varying = 4:27, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition_order = as.factor(D_tall$condition_order)
D_tall$condition = as.factor(D_tall$condition)
D_tall = D_tall[order(D_tall$ID),]
D_tall$condition_names = as.factor(rep(1:4, each = 6, times = 24))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A 'PHASE' COLUMN
D_tall$phase = as.factor(rep(1:3, each = 2, times = 96))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:2, times = 288))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B"))
# REORDER COLUMNS'
D_tall$condition = NULL
D_tall$row.names = NULL
D_tall = D_tall[,c(1,2,3,5,7,6,4)]
fix(D)
rm(list=ls())
# load all relevant libraries:
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
options(scipen=9999)
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
dim(D)
48+20
24*3
fix(D)
D = D[c(1:68),]
dim(D)
fix(D)
names(D)
dim(D)
fix(D)
D = D[c(1:68),c(1:3)]
names(D)
D$Exp = revalue(x = as.factor(D$Exp),
c("1" = "Exp1", "2"="Exp2",
"3" = "Exp4"))
head(D,10)
D_tall = reshape(D, varying = 2:3, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
fix(D_tal)
fix(D_tall)
68*2
dim(D_tall)
names(D_tall)
D_tall$condition = revalue(x = as.factor(D_tall$condition),
c("1" = "modifiedRW", "2"="Bayesian"))
fix(D_tall)
# reorder 'Exp' column
D_tall = D_tall[order(D_tall$Exp),]
dim(D_tall)
fix(D_tal)
fix(D_tall)
names(D_tall)
# remove 'ID' column
D_tall$ID = NULL
names(D_tall)
mean(D_tall$measure[D_tall$condition=="modifiedRW"])
mean(D_tall$measure[D_tall$condition=="modifiedRW" & D_tall$Exp=="Exp1"])
mean(D_tall$measure[D_tall$condition=="modifiedRW" & D_tall$Exp=="Exp2"])
mean(D_tall$measure[D_tall$condition=="modifiedRW" & D_tall$Exp=="Exp3"])
fix(D_tall)
mean(D_tall$measure[D_tall$condition=="modifiedRW" & D_tall$Exp=="Exp4"])
mean(D_tall$measure[D_tall$condition=="modifiedRW" & D_tall$Exp=="Exp4"])
mean(D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp4"])
mean(D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp2"])
mean(D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp1"])
perm_func = function(s1,s2,p1,p2){ # s=condition; p=Experiment
set.seed(2018)                         # do NOT forget to put the arguments in quote.
b = rep(0,4000)
for(i in 1:4000){
x = sample(D_tall$measure)
dif = x[D_tall$condition==s1 & D_tall$Exp==p1] -
x[D_tall$condition==s2 & D_tall$Exp==p2]
b[i] = mean(dif)
}
# compute the actual difference beween BB pre and BB post
bb_diff = mean(D_tall$measure[D_tall$condition==s1 & D_tall$Exp==p1]-
D_tall$measure[D_tall$condition==s2 & D_tall$Exp==p2])
# 1- and 2-tailed p-values
c(bb_diff, sum(abs(b) > bb_diff)/4000, sum(abs(b) < bb_diff)/4000,
sum(b > bb_diff)/4000, sum(b < bb_diff)/4000)
}
# BOOTSTRAP FUNCTION
# Single-factor bootstrap function
global_boot = function(s,p,o){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition==s & d$Exp==p],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
fix(D_tall)
perm_func("Bayesian","Bayesian","Exp1","Exp2")
global_boot("Bayesian","Bayesian","Exp1","Exp2")
global_boot_2 = function(s1,s2,p1,p2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition==s1 & d$Exp==p1],
data=D_tall) - mean(d$measure[d$conditions==s2 & d$Exp==p2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
global_boot_2("Bayesian","Bayesian","Exp1","Exp2")
global_boot_2 = function(s1,s2,p1,p2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition==s1 & d$Exp==p1],
data=D_tall) - mean(d$measure[d$condition==s2 & d$Exp==p2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
global_boot_2("Bayesian","Bayesian","Exp1","Exp2")
global_boot_2("Bayesian","Bayesian","Exp1","Exp4")
x = D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp1"]
y = D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp2"]
mean(x)
mean(y)
mean(x)-mean(y)
BF1 = ttestBF(x=x,y=y,paired=TRUE)
BF1
global_boot_2("Bayesian","Bayesian","Exp1","Exp2")
perm_func("Bayesian","Bayesian","Exp1","Exp4")
global_boot_2("Bayesian","Bayesian","Exp1","Exp4")
mean(x2)
x = D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp1"]
x2 = D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp1"]
mean(x2)
y2 = D_tall$measure[D_tall$condition=="Bayesian" & D_tall$Exp=="Exp4"]
mean(y2)
mean(y2)-mean(x2)
perm_func("Bayesian","Bayesian","Exp1","Exp4")
fix(D_tall)
perm_func("Bayesian","Bayesian","Exp1","Exp2")
# Experiment 1 vs Experiment 2 comparison
perm_func("Bayesian","Bayesian","Exp1","Exp4")
mean(y2)
mean(x2)
length(x2)
length(y2)
t.test(x,y,paired=TRUE)
t.test(x1,y1,paired=TRUE)
t.test(x2,y2,paired=TRUE)
x2
y2
t.test(x2,y2,paired=TRUE,var.equal = FALSE)
