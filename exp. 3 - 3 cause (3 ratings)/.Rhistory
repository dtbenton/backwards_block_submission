rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:24),]
D_tall = reshape(D, varying = 4:39, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition_order = as.factor(D_tall$condition_order)
D_tall$condition = as.factor(D_tall$condition)
D_tall = D_tall[order(D_tall$ID),]
# ADD A CONDITION NAME COLUMN
D_tall$condition_names = as.factor(rep(1:4, each = 9, times = 24))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A 'PHASE' COLUMN
D_tall$phase = as.factor(rep(1:3, each = 3, times = 96))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:3, times = 288))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C"))
# REORDER COLUMNS'
D_tall$condition = NULL
D_tall$row.names = NULL
D_tall = D_tall[,c(1,2,4,5,6,3)]
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D_tall = reshape(D, varying = 2:49, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$condition = as.factor(D_tall$condition)
D_tall = D_tall[order(D_tall$ID),]
# ADD A CONDITION NAME COLUMN
D_tall$condition_names = as.factor(rep(1:4, each = 12, times = 60))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A 'PHASE' COLUMN
D_tall$phase = as.factor(rep(1:3, each = 4, times = 240))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:2, each = 2, times = 720))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B"))
# EVENT TYPE COLUMN
D_tall$event_type = as.factor(rep(1:2, each = 1, times = 1440))
D_tall$event_type = revalue(x = as.factor(D_tall$event_type),
c("1" = "Plus", "2"="Minus"))
# REORDER COLUMNS'
D_tall$condition = NULL
D_tall$row.names = NULL
D_tall = D_tall[,c(1,3,4,5,6,2)]
perm_func = function(s1,s2,p1,p2,o1,o2){ # s=condition name; p=phase; o=objects
set.seed(2018)                         # do NOT forget to put the arguments in quote.
b = rep(0,4000)
for(i in 1:4000){
x = sample(D_tall$measure)
dif = x[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1] -
x[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2]
b[i] = mean(dif)
}
# compute the actual difference beween BB pre and BB post
bb_diff = mean(D_tall$measure[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1]-
D_tall$measure[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2])
# 1- and 2-tailed p-values
c(bb_diff, sum(abs(b) > bb_diff)/4000, sum(abs(b) < bb_diff)/4000,
sum(b > bb_diff)/4000, sum(b < bb_diff)/4000)
}
# BOOTSTRAP FUNCTION
# Single-factor bootstrap function
global_boot = function(s,p,o){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s & d$phase==p & d$objects==o],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
# BOOTSTRAP FUNCTION
# Condition-difference bootstrap function
global_boot_2 = function(s1,s2,p1,p2,o1,o2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s1 & d$phase==p1 & d$objects==o1],
data=D_tall) - mean(d$measure[d$condition_names==s2 & d$phase==p2 & d$objects==o2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
E_tall = D_tall[c(1:720),]
F_tall = D_tall[c(721:1440),]
G_tall = D_tall[c(1441:2160),]
H_tall = D_tall[c(2161:2880),]
BB_subset_3 = subset(E_tall, ! phase %in% c("Mid","Post"))
condition_barplot = ggplot(BB_subset_3, aes(event_type, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic()
names(D_tall)
E_tall = D_tall[c(1:720),]
BB_subset_4 = subset(E_tall, ! phase %in% c("Mid","Post"))
F_tall = D_tall[c(721:1440),]
BB_subset_5 = subset(F_tall, ! phase %in% c("Mid","Post"))
G_tall = D_tall[c(1441:2160),]
BB_subset_5 = subset(G_tall, ! phase %in% c("Mid","Post"))
H_tall = D_tall[c(2161:2880),]
BB_subset_6 = subset(H_tall, ! phase %in% c("Mid","Post"))
E_tall = D_tall[c(1:720),]
BB_subset_4 = subset(E_tall, ! phase %in% c("Mid","Post"))
F_tall = D_tall[c(721:1440),]
BB_subset_5 = subset(F_tall, ! phase %in% c("Mid","Post"))
G_tall = D_tall[c(1441:2160),]
BB_subset_6 = subset(G_tall, ! phase %in% c("Mid","Post"))
H_tall = D_tall[c(2161:2880),]
BB_subset_7 = subset(H_tall, ! phase %in% c("Mid","Post"))
condition_barplot = ggplot(BB_subset_5, aes(event_type, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(BB_subset_5, aes(objects, measure, fill = event_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(BB_subset_4, aes(objects, measure, fill = event_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(BB_subset_6, aes(objects, measure, fill = event_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(BB_subset_7, aes(objects, measure, fill = event_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
D = D[c(1:24),]
D_tall = reshape(D, varying = 4:39, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition_order = as.factor(D_tall$condition_order)
D_tall$condition = as.factor(D_tall$condition)
D_tall = D_tall[order(D_tall$ID),]
# ADD A CONDITION NAME COLUMN
D_tall$condition_names = as.factor(rep(1:4, each = 9, times = 24))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A 'PHASE' COLUMN
D_tall$phase = as.factor(rep(1:3, each = 3, times = 96))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:3, times = 288))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C"))
# REORDER COLUMNS'
D_tall$condition = NULL
D_tall$row.names = NULL
D_tall = D_tall[,c(1,2,4,5,6,3)]
perm_func = function(s1,s2,p1,p2,o1,o2){ # s=condition name; p=phase; o=objects
set.seed(2018)                         # do NOT forget to put the arguments in quote.
b = rep(0,4000)
for(i in 1:4000){
x = sample(D_tall$measure)
dif = x[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1] -
x[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2]
b[i] = mean(dif)
}
# compute the actual difference beween BB pre and BB post
bb_diff = mean(D_tall$measure[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1]-
D_tall$measure[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2])
# 1- and 2-tailed p-values
c(bb_diff, sum(abs(b) > bb_diff)/4000, sum(abs(b) < bb_diff)/4000,
sum(b > bb_diff)/4000, sum(b < bb_diff)/4000)
}
# BOOTSTRAP FUNCTION
# Single-factor bootstrap function
global_boot = function(s,p,o){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s & d$phase==p & d$objects==o],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
# BOOTSTRAP FUNCTION
# Condition-difference bootstrap function
global_boot_2 = function(s1,s2,p1,p2,o1,o2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s1 & d$phase==p1 & d$objects==o1],
data=D_tall) - mean(d$measure[d$condition_names==s2 & d$phase==p2 & d$objects==o2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
condition_barplot = ggplot(D_tall, aes(objects, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
dim(D)
D = D[c(1:24),]
names)D
names(D)
D_tall = reshape(D, varying = 4:39, v.names = "measure", timevar = "condition",
idvar = "ID",
direction = "long")
D_tall$measure = as.numeric(D_tall$measure)
D_tall$sex = as.factor(D_tall$sex)
D_tall$condition = as.factor(D_tall$condition)
D_tall = D_tall[order(D_tall$ID),]
D_tall$condition_names = as.factor(rep(1:4, each = 9, times = 24))
D_tall$condition_names = revalue(x = as.factor(D_tall$condition_names),
c("1" = "BB", "2"="IS", "3" = "1C",
"4" = "2C"))
# ADD A 'PHASE' COLUMN
D_tall$phase = as.factor(rep(1:3, each = 3, times = 96))
D_tall$phase = revalue(x = as.factor(D_tall$phase),
c("1" = "Pre", "2"="Mid", "3" = "Post"))
# RENAME SEX COLUMN
D_tall$sex = revalue(x = as.factor(D_tall$sex),
c("1" = "M", "2"="F"))
# OBJECT COLUMN
D_tall$objects = as.factor(rep(1:3, times = 288))
D_tall$objects = revalue(x = as.factor(D_tall$objects),
c("1" = "A", "2"="B", "3"="C"))
# REORDER COLUMNS'
D_tall$condition = NULL
D_tall$row.names = NULL
D_tall = D_tall[,c(1,2,4,5,6,3)]
names(D_tall)
fix(D_tall)
condition_barplot = ggplot(D_tall, aes(objects, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(ID~condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw()
condition_barplot = ggplot(D_tall, aes(objects, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(condition_names, labeller = label_wrap_gen(multi_line=FALSE)) + # scales='free' ensures that each blot has x labels
theme_bw()
condition_barplot = ggplot(D_tall, aes(objects, measure, fill = phase)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("ratings (scale: 0-100)") + # change the label of the y-axis
facet_wrap(~condition_names, scales = 'free') + # scales='free' ensures that each blot has x labels
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 110)) +
theme_classic() +
scale_fill_manual(values = c("white","gray68", "black")) +
theme(strip.text = element_text(colour = 'black', size = 12)) + # this changes the size and potentially weight of the facet labels
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf) + # this adds a vertical & horizontal line to each plot
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf) + # ditto
theme(legend.title=element_blank()) +
labs(x = "Test trials")
perm_func = function(s1,s2,p1,p2,o1,o2){ # s=condition name; p=phase; o=objects
set.seed(2018)                         # do NOT forget to put the arguments in quote.
b = rep(0,4000)
for(i in 1:4000){
x = sample(D_tall$measure)
dif = x[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1] -
x[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2]
b[i] = mean(dif)
}
# compute the actual difference beween BB pre and BB post
bb_diff = mean(D_tall$measure[D_tall$condition_names==s1 & D_tall$phase==p1 & D_tall$objects==o1]-
D_tall$measure[D_tall$condition_names==s2 & D_tall$phase==p2 & D_tall$objects==o2])
# 1- and 2-tailed p-values
c(bb_diff, sum(abs(b) > bb_diff)/4000, sum(abs(b) < bb_diff)/4000,
sum(b > bb_diff)/4000, sum(b < bb_diff)/4000)
}
# BOOTSTRAP FUNCTION
# Single-factor bootstrap function
global_boot = function(s,p,o){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s & d$phase==p & d$objects==o],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
# BOOTSTRAP FUNCTION
# Condition-difference bootstrap function
global_boot_2 = function(s1,s2,p1,p2,o1,o2){
set.seed(2018)
boot_fit = function(data,b,formula){
d= data[b,]
dif.1 =  mean(d$measure[d$condition_names==s1 & d$phase==p1 & d$objects==o1],
data=D_tall) - mean(d$measure[d$condition_names==s2 & d$phase==p2 & d$objects==o2],
data=D_tall)
return(dif.1)
}
boot_obj = boot(D_tall, boot_fit, R=4000)
c(boot_obj$t0, boot_obj$t0  + 1.96*-sd(boot_obj$t),
boot_obj$t0  + 1.96*sd(boot_obj$t))
}
global_boot_2("IS","IS","Pre","Mid","A","A")
global_boot_2("IS","IS","Pre","Mid","B","B")
mean(D_tall$measure[D_tall$objects=="C"])
perm_func("1C","1C","Pre","Mid","A","A")
perm_func("BB","BB","Mid","Post","B","B")
global_boot_2("BB","BB","Mid","Post","B","B")
